#include <SoftwareSerial.h>

#define DEBUG true

SoftwareSerial esp8266(3,2); 
// El TX del módulo al terminal 3 del Arduino.
// El RX del módulo al terminal 2 del Arduino.

void setup()
{
pinMode(12,OUTPUT);
pinMode(8,INPUT);
pinMode(9,INPUT);

Serial.begin(19200);
esp8266.begin(19200); // Importante la velocidad del módulo.

sendData("AT+RST\r\n",2000,DEBUG); // Borra la configuración que tenía el módulo
sendData("AT+CWJAP=\"D-Link_DIR-608\",\"4567gljc\"\r\n", 2000, DEBUG);
delay(5000); // Espera un poco que conecte con el Router.
sendData("AT+CWMODE=3\r\n",1000,DEBUG); // Modo de cliente y servidor.
sendData("AT+CIFSR\r\n",1000,DEBUG); // En el Serial Monitor aparece la IP de cliente y servidor.
sendData("AT+CIPMUX=1\r\n",1000,DEBUG); // Multiples conexiones.
sendData("AT+CIPSERVER=1,80\r\n",1000,DEBUG); // El Puerto web es el 80
}


void loop()
{
if(esp8266.available()) // Consulta si el módulo está enviando algún mensaje
{

if(esp8266.find("+IPD,"))
{
delay(1000);


int connectionId = esp8266.read()-48; 



// Aquí las construcción de la página con dos formularios.
String webpage = "<h1>tuned.cl</h1>";

webpage += "<style>";

webpage += "button{padding:6px;border-radius:10px;width:120px;}";

webpage +=  "</style>";



webpage += "<!DOCTYPE HTML>";

webpage += "<html>";
webpage += "<head><title>Encender Led esp8266</title></head>";
webpage += "<body><h1> <FONT SIZE=\"3\" COLOR=\"red\">Canal 13</h1>"; 
webpage += "<BODY BGCOLOR=\"#EFFBFB\"> ";
webpage += "<br>Estado Canal 8: ";
int p8 = digitalRead(8);
webpage += p8;
webpage += "<br>Estado Canal 9: ";
int p9 = digitalRead(9);
webpage += p9;

  
webpage += "<form  method=\"get\" action=\"/enci\">";
webpage += "<button  type=\"submit\">ON</button/></form>";
webpage += "<form  method=\"get\" action=\"/apag\">";
webpage += "<button type=\"submit\">OFF</button ></form>";
webpage += "</body>";
webpage += "</html>";


String cipSend = "AT+CIPSEND=";
cipSend += connectionId;
cipSend += ",";
cipSend +=webpage.length();
cipSend +="\r\n";

sendData(cipSend,1000,DEBUG);
sendData(webpage,1000,DEBUG);



// Cierra la conexión
String closeCommand = "AT+CIPCLOSE="; 
closeCommand+=connectionId;
closeCommand+="\r\n";

sendData(closeCommand,3000,DEBUG);
}
}
}

// Función para Enviar datos al Servidor.
String sendData(String command, const int timeout, boolean debug)
{
String response = "";
esp8266.print(command); // Envía la información de command al servidor
long int time = millis();

while( (time+timeout) > millis())
{
while(esp8266.available())
{
  
// A response van los datos que regresan al servidor.
char c = esp8266.read(); // Va leyendo caracter a caracter.
response+=c;

// Consulta si en la información que regresa al servidor
// viene "GET /enci" o "GET /apag"
// Encenderá o apagará el LED12 del Arduino

if(response.indexOf("GET /enci") >0){
// Serial.print("enciende");
digitalWrite(12,HIGH);

}
if(response.indexOf("GET /apag") >0){
//Serial.print("apaga");
digitalWrite(12,LOW);

}

} 
}

if(debug)
{
Serial.print(response);
} 
return response;
String sendData(String command, const int timeout, boolean debug);

}
